import streamlit as st
from datetime import datetime
import random
from transformers import pipeline, set_seed
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Canteen-X AI –ß–∞—Ç",
    page_icon="ü§ñ",
    layout="centered"
)

class ImprovedCanteenAI:
    def __init__(self):
        self.chatbot = None
        self.load_model()
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        self.canteen_info = {
            "–º–µ–Ω—é": {
                "–ø–∏—Ü—Ü–∞": ["üçï –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 350 —Ä—É–±", "üçï –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ - 380 —Ä—É–±", "üçï –ì–∞–≤–∞–π—Å–∫–∞—è - 370 —Ä—É–±"],
                "–±—É—Ä–≥–µ—Ä—ã": ["üçî –ö–ª–∞—Å—Å–∏–∫ - 280 —Ä—É–±", "üçî –ß–∏–∑–±—É—Ä–≥–µ—Ä - 300 —Ä—É–±", "üçî –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π - 260 —Ä—É–±"],
                "—Å–∞–ª–∞—Ç—ã": ["ü•ó –¶–µ–∑–∞—Ä—å - 220 —Ä—É–±", "ü•ó –ì—Ä–µ—á–µ—Å–∫–∏–π - 200 —Ä—É–±", "ü•ó –û–ª–∏–≤—å–µ - 180 —Ä—É–±"],
                "–ø–∞—Å—Ç–∞": ["üçù –ö–∞—Ä–±–æ–Ω–∞—Ä–∞ - 320 —Ä—É–±", "üçù –ë–æ–ª–æ–Ω—å–µ–∑–µ - 340 —Ä—É–±", "üçù –ê–ª—å—Ñ—Ä–µ–¥–æ - 310 —Ä—É–±"],
                "–Ω–∞–ø–∏—Ç–∫–∏": ["ü•§ –ö–æ–ª–∞ - 100 —Ä—É–±", "ü•§ –°–æ–∫ - 120 —Ä—É–±", "‚òï –ö–æ—Ñ–µ - 150 —Ä—É–±", "üçµ –ß–∞–π - 80 —Ä—É–±"]
            },
            "–≤—Ä–µ–º—è": "üïí –ü–Ω-–ü—Ç: 8:00-20:00, –°–±-–í—Å: 9:00-18:00",
            "–æ–ø–ª–∞—Ç–∞": "üí≥ –ö–∞—Ä—Ç—ã (Visa/Mastercard), –º–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, –Ω–∞–ª–∏—á–Ω—ã–µ",
            "–¥–æ—Å—Ç–∞–≤–∫–∞": "üöó –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ –∫–∞–º–ø—É—Å—É, 100 —Ä—É–± –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏",
            "—Ç–∏–ø –∑–∞–∫–∞–∑–∞": ["üì¶ —Å —Å–æ–±–æ–π", "üçΩÔ∏è –≤ –∑–∞–ª–µ"]
        }
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        try:
            self.chatbot = pipeline(
                "text-generation",
                model="microsoft/DialoGPT-medium",  # –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
                max_length=200,
                temperature=0.8,  # –ë–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                do_sample=True,
                pad_token_id=50256
            )
            set_seed(42)  # –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        except Exception as e:
            st.error(f"‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è AI: {e}")
            self.chatbot = None
    
    def get_ai_response(self, user_message):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π AI —Å –ª—É—á—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        lower_message = user_message.lower()
        
        # –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        smart_responses = {
            '–ø—Ä–∏–≤–µ—Ç': ["–ü—Ä–∏–≤–µ—Ç! üëã –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∑–∞–∫–∞–∑–æ–º?", 
                      "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üòä –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –≤–∫—É—Å–Ω—ã–π –æ–±–µ–¥!"],
            '–º–µ–Ω—é': [self.get_menu_response()],
            '–∫–∞–∫ –¥–µ–ª–∞': ["–û—Ç–ª–∏—á–Ω–æ! üéâ –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–∫–∞–∑–∞–º–∏ –µ–¥—ã! –ê —É —Ç–µ–±—è –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–º –±–æ–ª–µ–µ –∫–æ–≥–¥–∞ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –≤–∫—É—Å–Ω–æ–π –µ–¥—ã! üçï"],
            '—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å': ["–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–∏—Ü—Ü—É –ü–µ–ø–ø–µ—Ä–æ–Ω–∏! üçï –û–Ω–∞ –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω–∞! –ò–ª–∏ –º–æ–∂–µ—Ç —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å? ü•ó",
                               "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à –±—É—Ä–≥–µ—Ä –ö–ª–∞—Å—Å–∏–∫! üçî –í—Å–µ –æ—Ç –Ω–µ–≥–æ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!"],
            '—Å–ø–∞—Å–∏–±–æ': ["–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!",
                       "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üé© –ñ–¥—É —Ç–≤–æ–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞!"],
            '–ø–æ–∫–∞': ["–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã –ñ–¥—É —Ç–≤–æ–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!",
                    "–ü–æ–∫–∞-–ø–æ–∫–∞! üçï –ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞—Ö–æ–¥–∏—Ç—å –∑–∞ –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π!"]
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        for key, responses in smart_responses.items():
            if key in lower_message:
                return random.choice(responses)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ñ–µ
        if any(word in lower_message for word in ['–º–µ–Ω—é', '–µ–¥–∞', '–±–ª—é–¥', '–∫—É—Ö–Ω', '–∑–∞–∫–∞–∑']):
            return self.get_menu_response()
        elif any(word in lower_message for word in ['–≤—Ä–µ–º—è', '—Ä–∞–±–æ—Ç–∞', '–æ—Ç–∫—Ä—ã—Ç', '–∑–∞–∫—Ä—ã—Ç']):
            return f"üïí {self.canteen_info['–≤—Ä–µ–º—è']}"
        elif any(word in lower_message for word in ['–æ–ø–ª–∞—Ç', '–∫–∞—Ä—Ç', '–¥–µ–Ω—å–≥', '—Ü–µ–Ω–∞']):
            return f"üí≥ {self.canteen_info['–æ–ø–ª–∞—Ç–∞']}"
        elif any(word in lower_message for word in ['–¥–æ—Å—Ç–∞–≤–∫', '–ø—Ä–∏–≤–µ–∑', '–∑–∞–±–µ—Ä']):
            return f"üöó {self.canteen_info['–¥–æ—Å—Ç–∞–≤–∫–∞']}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if self.chatbot:
            try:
                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                prompt = f"""–¢—ã –ì—Ä–∏–≥–æ—Ä–∏–π - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –≤–µ—Å–µ–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ç–æ–ª–æ–≤–æ–π Canteen-X. 
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ë—É–¥—å –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–º!

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}
–ì—Ä–∏–≥–æ—Ä–∏–π:"""
                
                response = self.chatbot(
                    prompt,
                    max_new_tokens=100,
                    temperature=0.8,
                    do_sample=True
                )
                
                ai_text = response[0]['generated_text']
                clean_response = ai_text.split("–ì—Ä–∏–≥–æ—Ä–∏–π:")[-1].strip()
                
                # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                if clean_response and len(clean_response) > 5:
                    return clean_response
                else:
                    return "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ú–æ–∂–µ—Ç, –º–µ–Ω—é –∏–ª–∏ –∑–∞–∫–∞–∑? üòä"
                
            except Exception as e:
                return "–ü—Ä–∏–≤–µ—Ç! üòä –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∑–∞–∫–∞–∑–æ–º –µ–¥—ã?"
        
        # –ó–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç
        return "–ü—Ä–∏–≤–µ—Ç! –Ø –ì—Ä–∏–≥–æ—Ä–∏–π ü§ñ –ü–æ–º–æ–≥—É —Å –∑–∞–∫–∞–∑–æ–º –µ–¥—ã! –°–ø—Ä–æ—Å–∏ –æ –º–µ–Ω—é –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã! üçï"
    
    def get_menu_response(self):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é"""
        menu_text = "üçΩÔ∏è **–ù–∞—à–µ –≤–∫—É—Å–Ω–æ–µ –º–µ–Ω—é:**\n\n"
        for category, items in self.canteen_info["–º–µ–Ω—é"].items():
            menu_text += f"**{category.upper()}:**\n"
            for item in items:
                menu_text += f"  {item}\n"
            menu_text += "\n"
        menu_text += "–ß—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ? –ú–æ–≥—É –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å! üòã"
        return menu_text

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI
    if 'ai_bot' not in st.session_state:
        with st.spinner("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —É–º–Ω–æ–≥–æ –ì—Ä–∏–≥–æ—Ä–∏—è..."):
            st.session_state.ai_bot = ImprovedCanteenAI()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if 'messages' not in st.session_state:
        st.session_state.messages = []
        st.session_state.messages.append({
            "role": "bot", 
            "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –ì—Ä–∏–≥–æ—Ä–∏–π ü§ñ\n–¢–≤–æ–π –≤–µ—Å–µ–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Canteen-X! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∑–∞–∫–∞–∑–æ–º, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å! üòä",
            "time": datetime.now().strftime("%H:%M")
        })
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    col1, col2 = st.columns([3, 1])
    with col1:
        st.title("Canteen-X üçï")
        st.subheader("–£–º–Ω—ã–π —á–∞—Ç —Å –ì—Ä–∏–≥–æ—Ä–∏–µ–º")
        st.caption("üöÄ –¢–µ–ø–µ—Ä—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º AI!")
    with col2:
        st.markdown("<div style='text-align: center; font-size: 50px'>ü§ñ</div>", unsafe_allow_html=True)
    
    # –°—Ç–∞—Ç—É—Å
    if st.session_state.ai_bot.chatbot:
        st.success("‚úÖ –£–º–Ω—ã–π AI –∞–∫—Ç–∏–≤–µ–Ω! –ì—Ä–∏–≥–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!")
    else:
        st.warning("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    st.markdown("---")
    chat_container = st.container()
    
    with chat_container:
        for msg in st.session_state.messages:
            if msg["role"] == "user":
                st.markdown(f"""
                <div style='display: flex; justify-content: flex-end; margin-bottom: 15px;'>
                    <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 18px 18px 0 18px; margin: 8px 0; max-width: 80%;'>
                        {msg["content"]}
                        <div style='font-size: 0.8em; color: rgba(255,255,255,0.8); margin-top: 4px;'>{msg["time"]}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style='display: flex; justify-content: flex-start; margin-bottom: 15px;'>
                    <div style='background: #f1f3f4; color: #333; padding: 12px 16px; border-radius: 18px 18px 18px 0; margin: 8px 0; max-width: 80%;'>
                        {msg["content"]}
                        <div style='font-size: 0.8em; color: #666; margin-top: 4px;'>{msg["time"]}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Enter
    with st.form(key='chat_form', clear_on_submit=True):
        user_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å... (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)",
            label_visibility="collapsed"
        )
        submit_button = st.form_submit_button(label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚û§')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ Enter –∏–ª–∏ –∫–Ω–æ–ø–∫–µ
    if submit_button and user_input.strip():
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({
            "role": "user",
            "content": user_input,
            "time": datetime.now().strftime("%H:%M")
        })
        
        # –ü–æ–ª—É—á–∞–µ–º AI –æ—Ç–≤–µ—Ç
        with st.spinner("–ì—Ä–∏–≥–æ—Ä–∏–π –¥—É–º–∞–µ—Ç..."):
            ai_response = st.session_state.ai_bot.get_ai_response(user_input)
        
        st.session_state.messages.append({
            "role": "bot", 
            "content": ai_response,
            "time": datetime.now().strftime("%H:%M")
        })
        
        st.rerun()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    st.markdown("**–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**")
    cols = st.columns(3)
    quick_actions = [
        ("üìã –ß—Ç–æ –≤ –º–µ–Ω—é?", "–ß—Ç–æ –≤ –º–µ–Ω—é?"),
        ("üïí –î–æ —Å–∫–æ–ª—å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", "–î–æ —Å–∫–æ–ª—å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"),
        ("üí∏ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?", "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?"),
        ("üöó –ï—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞?", "–ï—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞?"),
        ("üòä –ö–∞–∫ –¥–µ–ª–∞?", "–ö–∞–∫ –¥–µ–ª–∞?"),
        ("üçï –ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?", "–ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?")
    ]
    
    for i, (btn_text, message) in enumerate(quick_actions):
        with cols[i % 3]:
            if st.button(btn_text, use_container_width=True, key=f"quick_{i}"):
                st.session_state.messages.append({
                    "role": "user",
                    "content": message,
                    "time": datetime.now().strftime("%H:%M")
                })
                
                with st.spinner("–ì—Ä–∏–≥–æ—Ä–∏–π –¥—É–º–∞–µ—Ç..."):
                    ai_response = st.session_state.ai_bot.get_ai_response(message)
                
                st.session_state.messages.append({
                    "role": "bot",
                    "content": ai_response,
                    "time": datetime.now().strftime("%H:%M")
                })
                
                st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", use_container_width=True):
        st.session_state.messages = []
        st.session_state.messages.append({
            "role": "bot",
            "content": "–ß–∞—Ç –æ—á–∏—â–µ–Ω! –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ! üòä",
            "time": datetime.now().strftime("%H:%M")
        })
        st.rerun()

if __name__ == "__main__":
    main()
