import streamlit as st
from datetime import datetime
import random
from transformers import pipeline
import warnings

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Canteen-X Local AI",
    page_icon="ü§ñ",
    layout="centered"
)


class LocalCanteenAI:
    def __init__(self):
        self.chatbot = None
        self.load_model()

        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ Canteen-X
        self.canteen_info = {
            "–º–µ–Ω—é": {
                "–ø–∏—Ü—Ü–∞": ["–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 350 —Ä—É–±", "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ - 380 —Ä—É–±", "–ì–∞–≤–∞–π—Å–∫–∞—è - 370 —Ä—É–±"],
                "–±—É—Ä–≥–µ—Ä—ã": ["–ö–ª–∞—Å—Å–∏–∫ - 280 —Ä—É–±", "–ß–∏–∑–±—É—Ä–≥–µ—Ä - 300 —Ä—É–±", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π - 260 —Ä—É–±"],
                "—Å–∞–ª–∞—Ç—ã": ["–¶–µ–∑–∞—Ä—å - 220 —Ä—É–±", "–ì—Ä–µ—á–µ—Å–∫–∏–π - 200 —Ä—É–±", "–û–ª–∏–≤—å–µ - 180 —Ä—É–±"],
                "–ø–∞—Å—Ç–∞": ["–ö–∞—Ä–±–æ–Ω–∞—Ä–∞ - 320 —Ä—É–±", "–ë–æ–ª–æ–Ω—å–µ–∑–µ - 340 —Ä—É–±", "–ê–ª—å—Ñ—Ä–µ–¥–æ - 310 —Ä—É–±"],
                "–Ω–∞–ø–∏—Ç–∫–∏": ["–ö–æ–ª–∞ - 100 —Ä—É–±", "–°–æ–∫ - 120 —Ä—É–±", "–ö–æ—Ñ–µ - 150 —Ä—É–±", "–ß–∞–π - 80 —Ä—É–±"]
            },
            "–≤—Ä–µ–º—è": "–ü–Ω-–ü—Ç: 8:00-20:00, –°–±-–í—Å: 9:00-18:00",
            "–æ–ø–ª–∞—Ç–∞": "–ö–∞—Ä—Ç—ã (Visa/Mastercard), –º–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, –Ω–∞–ª–∏—á–Ω—ã–µ",
            "–¥–æ—Å—Ç–∞–≤–∫–∞": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ –∫–∞–º–ø—É—Å—É, 100 —Ä—É–± –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏",
            "—Ç–∏–ø –∑–∞–∫–∞–∑–∞": ["—Å —Å–æ–±–æ–π", "–≤ –∑–∞–ª–µ"]
        }

    def load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
            self.chatbot = pipeline(
                "text-generation",
                model="microsoft/DialoGPT-small",
                tokenizer="microsoft/DialoGPT-small",
                torch_dtype='auto'
            )
            st.success("‚úÖ AI –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.chatbot = None

    def get_ai_response(self, user_message):
        """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º Canteen-X"""

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        lower_message = user_message.lower()

        # –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ Canteen-X
        if any(word in lower_message for word in ['–º–µ–Ω—é', '–µ–¥–∞', '–±–ª—é–¥', '–∫—É—Ö–Ω']):
            return self.get_menu_response()

        elif any(word in lower_message for word in ['–≤—Ä–µ–º—è', '—Ä–∞–±–æ—Ç–∞', '–æ—Ç–∫—Ä—ã—Ç']):
            return f"üïí {self.canteen_info['–≤—Ä–µ–º—è']}"

        elif any(word in lower_message for word in ['–æ–ø–ª–∞—Ç', '–∫–∞—Ä—Ç', '–¥–µ–Ω—å–≥']):
            return f"üí≥ {self.canteen_info['–æ–ø–ª–∞—Ç–∞']}"

        elif any(word in lower_message for word in ['–¥–æ—Å—Ç–∞–≤–∫', '–ø—Ä–∏–≤–µ–∑']):
            return f"üöó {self.canteen_info['–¥–æ—Å—Ç–∞–≤–∫–∞']}"

        elif any(word in lower_message for word in ['–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑—ã–≤']):
            return "üéØ –û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–∫–∞–∑–∞:\n1. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –º–µ–Ω—é\n2. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞: '—Å —Å–æ–±–æ–π' –∏–ª–∏ '–≤ –∑–∞–ª–µ'\n3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑"

        elif any(word in lower_message for word in ['—Å —Å–æ–±–æ–π', '–Ω–∞–≤—ã–Ω–æ—Å']):
            return "üì¶ –ó–∞–∫–∞–∑ '—Å —Å–æ–±–æ–π' –±—É–¥–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏?"

        elif any(word in lower_message for word in ['–≤ –∑–∞–ª–µ', '–Ω–∞ –º–µ—Å—Ç–µ']):
            return "üçΩÔ∏è –ó–∞–∫–∞–∑ '–≤ –∑–∞–ª–µ' - —Å—Ç–æ–ª–∏–∫ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤–∞—Å. –ö–∞–∫–æ–µ –±–ª—é–¥–æ?"

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
        elif self.chatbot:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ä–æ–ª–∏ –±–æ—Ç–∞
                prompt = f"–¢—ã –ì—Ä–∏–≥–æ—Ä–∏–π - –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ç–æ–ª–æ–≤–æ–π Canteen-X. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –í–æ–ø—Ä–æ—Å: {user_message}"

                response = self.chatbot(
                    prompt,
                    max_length=150,
                    num_return_sequences=1,
                    temperature=0.7,
                    do_sample=True,
                    pad_token_id=50256
                )

                ai_text = response[0]['generated_text']
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                clean_response = ai_text.replace(prompt, "").strip()
                return clean_response if clean_response else "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∑–∞–∫–∞–∑–æ–º –µ–¥—ã?"

            except Exception as e:
                return f"ü§ñ –°–ø—Ä–æ—Å–∏—Ç–µ –æ –Ω–∞—à–µ–º –º–µ–Ω—é, –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!"

        else:
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –ì—Ä–∏–≥–æ—Ä–∏–π ü§ñ –ü–æ–º–æ–≥—É —Å –∑–∞–∫–∞–∑–æ–º –µ–¥—ã –≤ Canteen-X. –°–ø—Ä–æ—Å–∏—Ç–µ –æ –º–µ–Ω—é –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã!"

    def get_menu_response(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç —Å –º–µ–Ω—é"""
        menu_text = "üçΩÔ∏è **–ù–∞—à–µ –º–µ–Ω—é:**\n\n"
        for category, items in self.canteen_info["–º–µ–Ω—é"].items():
            menu_text += f"**{category.title()}:**\n"
            for item in items:
                menu_text += f"‚Ä¢ {item}\n"
            menu_text += "\n"
        menu_text += "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        return menu_text


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI
    if 'ai_bot' not in st.session_state:
        with st.spinner("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º AI –º–æ–¥–µ–ª—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É"):
            st.session_state.ai_bot = LocalCanteenAI()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if 'messages' not in st.session_state:
        st.session_state.messages = []
        st.session_state.messages.append({
            "role": "bot",
            "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –ì—Ä–∏–≥–æ—Ä–∏–π ü§ñ\n–í–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ Canteen-X. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –º–µ–Ω—é, –∑–∞–∫–∞–∑–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã!",
            "time": datetime.now().strftime("%H:%M")
        })

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    col1, col2 = st.columns([3, 1])
    with col1:
        st.title("Canteen-X üçï")
        st.subheader("–õ–æ–∫–∞–ª—å–Ω—ã–π AI –ß–∞—Ç —Å –ì—Ä–∏–≥–æ—Ä–∏–µ–º")
        st.caption("üöÄ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω!")

    with col2:
        st.markdown("<div style='text-align: center; font-size: 50px'>üß†</div>", unsafe_allow_html=True)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ AI
    if st.session_state.ai_bot.chatbot:
        st.success("‚úÖ AI –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!")
    else:
        st.warning("‚ö†Ô∏è AI –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)")

    # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    st.markdown("---")
    chat_container = st.container()

    with chat_container:
        for msg in st.session_state.messages:
            if msg["role"] == "user":
                st.markdown(f"""
                <div style='display: flex; justify-content: flex-end; margin-bottom: 15px;'>
                    <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 18px 18px 0 18px; margin: 8px 0; max-width: 80%;'>
                        {msg["content"]}
                        <div style='font-size: 0.8em; color: rgba(255,255,255,0.8); margin-top: 4px;'>{msg["time"]}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style='display: flex; justify-content: flex-start; margin-bottom: 15px;'>
                    <div style='background: #f1f3f4; color: #333; padding: 12px 16px; border-radius: 18px 18px 18px 0; margin: 8px 0; max-width: 80%;'>
                        {msg["content"]}
                        <div style='font-size: 0.8em; color: #666; margin-top: 4px;'>{msg["time"]}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)

    st.markdown("---")

    # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    col1, col2 = st.columns([4, 1])

    with col1:
        user_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –æ –º–µ–Ω—é, –∑–∞–∫–∞–∑–µ, –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã...",
            label_visibility="collapsed"
        )

    with col2:
        send_clicked = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", use_container_width=True)

    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    st.markdown("**–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**")
    quick_questions = [
        "–ß—Ç–æ –≤ –º–µ–Ω—é?",
        "–î–æ —Å–∫–æ–ª—å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
        "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?",
        "–ï—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞?",
        "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É"
    ]

    cols = st.columns(len(quick_questions))
    for i, question in enumerate(quick_questions):
        with cols[i]:
            if st.button(question, key=f"btn_{i}", use_container_width=True):
                user_input = question
                send_clicked = True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_input and send_clicked:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({
            "role": "user",
            "content": user_input,
            "time": datetime.now().strftime("%H:%M")
        })

        # –ü–æ–ª—É—á–∞–µ–º AI –æ—Ç–≤–µ—Ç
        with st.spinner("–ì—Ä–∏–≥–æ—Ä–∏–π –¥—É–º–∞–µ—Ç..."):
            ai_response = st.session_state.ai_bot.get_ai_response(user_input)

        st.session_state.messages.append({
            "role": "bot",
            "content": ai_response,
            "time": datetime.now().strftime("%H:%M")
        })

        st.rerun()

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"):
        st.session_state.messages = []
        st.session_state.messages.append({
            "role": "bot",
            "content": "–ß–∞—Ç –æ—á–∏—â–µ–Ω! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "time": datetime.now().strftime("%H:%M")
        })
        st.rerun()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"):
        st.write("""
        **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
        - ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π AI: DialoGPT-small
        - üöÄ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: Transformers –æ—Ç Hugging Face
        - üíæ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω
        - ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

        **–ß—Ç–æ —É–º–µ–µ—Ç –ì—Ä–∏–≥–æ—Ä–∏–π:**
        - –ü–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–∫–∞–∑–∞–º–∏ –µ–¥—ã
        - –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –º–µ–Ω—é –∏ —Ü–µ–Ω–∞—Ö
        - –û—Ç–≤–µ—á–∞—Ç—å –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∏ –æ–ø–ª–∞—Ç–µ
        - –û–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É
        - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        """)


if __name__ == "__main__":
    main()